"""
–ö–æ–º–∞–Ω–¥—ã CLI –¥–ª—è Session Manager
–†–µ–∞–ª–∏–∑—É–µ—Ç –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏.
"""
from typing import List, Optional
from pathlib import Path
from ..core.config import GlobalConfig, ConfigError
from ..core.project_registry import ProjectRegistry
from ..core.project import Project, ProjectError
from ..core.session import SessionManager, SessionError
from ..core.context import ContextManager, ContextError
from ..integrations.git import GitIntegration
from ..integrations.tests import TestsIntegration
from ..integrations.github import GitHubIntegration
from ..utils.formatters import (
    print_success, print_error, print_warning, print_info,
    print_subsection, format_duration, format_timestamp,
    format_table, format_stats,
    print_header
)

class CLI:
    """
    –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è Session Manager.

    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –æ–ø—ã—Ç.
    """

    def __init__(self, config: GlobalConfig, registry: ProjectRegistry):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è CLI.

        Args:
            config: –≠–∫–∑–µ–º–ø–ª—è—Ä –≥–ª–æ–±–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            registry: –≠–∫–∑–µ–º–ø–ª—è—Ä —Ä–µ–µ—Å—Ç—Ä–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤
        """
        self.config = config
        self.registry = registry

    def run(self, args: List[str]) -> int:
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É CLI.

        Args:
            args: –ê—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏

        Returns:
            –ö–æ–¥ –≤—ã—Ö–æ–¥–∞ (0 ‚Äî —É—Å–ø–µ—Ö, –Ω–µ–Ω—É–ª–µ–≤–æ–µ ‚Äî –æ—à–∏–±–∫–∏)
        """
        if not args:
            return self.show_help()

        command = args[0].lower()
        rest_args = args[1:]

        # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥
        commands = {
            "project": self.cmd_project,
            "start": self.cmd_start,
            "end": self.cmd_end,
            "status": self.cmd_status,
            "history": self.cmd_history,
            "stats": self.cmd_stats,
            "help": self.show_help,
            "version": self.show_version,
        }

        if command in commands:
            try:
                return commands[command](rest_args)
            except (ConfigError, ProjectError, SessionError, ContextError) as e:
                print_error(str(e))
                return 1
            except Exception as e:
                print_error(f"Unexpected error: {e}")
                return 1
        else:
            print_error(f"Unknown command: {command}")
            print_info("Run 'session help' for usage information")
            return 1

    # ==================== –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ–µ–∫—Ç–∞ ====================

    def cmd_project(self, args: List[str]) -> int:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–∫–æ–º–∞–Ω–¥ –ø—Ä–æ–µ–∫—Ç–∞."""
        if not args:
            print_error("Missing project subcommand")
            print_info("Available: add, list, remove, info")
            return 1

        subcommand = args[0].lower()
        sub_args = args[1:]

        if subcommand == "add":
            return self.project_add(sub_args)
        elif subcommand == "list":
            return self.project_list(sub_args)
        elif subcommand == "remove":
            return self.project_remove(sub_args)
        elif subcommand == "info":
            return self.project_info(sub_args)
        else:
            print_error(f"Unknown project subcommand: {subcommand}")
            return 1

    def project_add(self, args: List[str]) -> int:
        """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç."""
        if len(args) < 2:
            print_error("Usage: session project add <name> <path> [--alias <alias>]")
            return 1

        name = args[0]
        path = args[1]
        alias = None

        # –†–∞–∑–±–æ—Ä –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Å–µ–≤–¥–æ–Ω–∏–º–∞
        if len(args) >= 4 and args[2] == "--alias":
            alias = args[3]

        try:
            project = self.registry.add(name, path, alias=alias, set_as_current=True)
            print_success(f"Added project '{name}'")
            print_info(f"Path: {project.path}")
            if alias:
                print_info(f"Alias: {alias}")
            print_info("Set as current project")
            return 0
        except (ConfigError, ProjectError) as e:
            print_error(f"Failed to add project: {e}")
            return 1

    def project_list(self, args: List[str]) -> int:
        """–í—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤."""
        projects_info = self.registry.list(sort_by_usage=True)

        if not projects_info:
            print_info("No projects registered yet")
            print_info("Add a project with: session project add <name> <path>")
            return 0

        print_header("Registered Projects")

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        projects_data = []
        for proj_info in projects_info:
            projects_data.append({
                "name": proj_info.name,
                "alias": proj_info.alias or "-",
                "path": str(proj_info.path)[:40] + "..." if len(str(proj_info.path)) > 40 else str(proj_info.path),
            })

        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
        if self.config.current_project:
            print(f"üìå Current: {self.config.current_project}\n")

        # –ü–µ—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã
        table = format_table(projects_data, ["name", "alias", "path"])
        print(table)

        print(f"\n Total: {len(projects_info)} projects")

        return 0

    def project_remove(self, args: List[str]) -> int:
        """–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ–µ–∫—Ç."""
        if len(args) < 1:
            print_error("Usage: session project remove <name>")
            return 1

        name = args[0]

        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
        response = input(f"Remove project '{name}'? (y/N): ").strip().lower()
        if response != 'y':
            print_info("Cancelled")
            return 0

        try:
            success = self.registry.remove(name, delete_data=False)
            if success:
                print_success(f"Removed project '{name}'")
                print_info("Project data preserved in ~/.session-manager/")
                return 0
            else:
                print_error(f"Project '{name}' not found")
                return 1
        except ProjectError as e:
            print_error(f"Failed to remove project: {e}")
            return 1

    def project_info(self, args: List[str]) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ."""
        if len(args) < 1:
            print_error("Usage: session project info <name>")
            return 1

        name = args[0]
        project = self.registry.get(name)

        if not project:
            print_error(f"Project '{name}' not found")
            return 1

        print_header(f"Project: {name}")

        info = project.get_project_info()

        print(f"Path: {info['path']}")
        print(f"Exists: {'‚úÖ' if info['exists'] else '‚ùå'}")
        print(f"Has PROJECT.md: {'‚úÖ' if info['has_project_md'] else '‚ùå'}")
        print(f"\nTotal Sessions: {info['total_sessions']}")
        print(f"Active Session: {info['active_session'] if info['active_session'] else 'None'}")
        print(f"Total Snapshots: {info['total_snapshots']}")

        if info['latest_snapshot']:
            print(f"Latest Snapshot: {info['latest_snapshot']}")

        return 0

    # ==================== –ö–æ–º–∞–Ω–¥—ã —Å–µ—Å—Å–∏–π ====================

    def cmd_start(self, args: List[str]) -> int:
        """–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é."""
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        project_name = args[0] if args else None
        project = self._resolve_project(project_name)

        if not project:
            return 1

        # –ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ
        description = ""
        if len(args) > 1:
            description = " ".join(args[1:])

        try:
            sm = SessionManager(project)

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            if sm.get_active():
                print_warning("Session already active!")
                print_info("End it with: session end")
                return 1

            print_header("üöÄ Starting New Session")
            print(f"Project: {project.name}\n")

            # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self._show_last_context(project)

            # –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å git
            self._show_git_status(project)

            # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ GitHub
            self._show_github_issues(project)

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã
            self._show_test_status(project)

            # –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Å—Å–∏—é
            session = sm.start(description=description)

            # –û–±–Ω–æ–≤–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –ø–æ git
            git = GitIntegration(project.path)
            if git.is_git_repo():
                sm.update_session_metadata(
                    session["id"],
                    branch=git.get_current_branch(),
                    last_commit=git.get_last_commit()
                )

            print_success("Session started!")
            print_info(f"Session ID: {session['id'][:8]}...")

            return 0

        except SessionError as e:
            print_error(f"Failed to start session: {e}")
            return 1

    def cmd_end(self, args: List[str]) -> int:
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é."""
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        project_name = args[0] if args else None
        project = self._resolve_project(project_name)

        if not project:
            return 1

        try:
            sm = SessionManager(project)

            active = sm.get_active()
            if not active:
                print_warning("No active session")
                return 1

            print_header("üíæ Ending Session")

            # –ü–æ–ª—É—á–∏—Ç—å –∏—Ç–æ–≥
            print("What was accomplished in this session?")
            summary = input("Summary: ").strip()

            print("\nWhat is the next concrete action?")
            print("(e.g., 'Add tests for parse_data function')")
            next_action = input("Next action: ").strip()

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–∑–∞–∫–æ–º–º–∏—á–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            git = GitIntegration(project.path)
            if git.has_uncommitted_changes():
                print_warning("\nUncommitted changes detected!")
                changes = git.get_uncommitted_changes()
                print(changes[:200])  # –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤

                response = input("\nCreate a commit? (y/N): ").strip().lower()
                if response == 'y':
                    commit_msg = input("Commit message: ").strip()
                    if commit_msg:
                        git.add_all()
                        if git.create_commit(commit_msg):
                            print_success("Commit created")
                        else:
                            print_error("Failed to create commit")

            # –ó–∞–≤–µ—Ä—à–∏—Ç—å —Å–µ—Å—Å–∏—é
            completed = sm.end(summary=summary, next_action=next_action)

            # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–Ω–∏–º–æ–∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            cm = ContextManager(project)
            git_info = git.get_git_info() if git.is_git_repo() else None
            tests = TestsIntegration(project.path)
            test_info = tests.get_test_info() if tests.is_pytest_available() else None

            snapshot_path = cm.save_snapshot(
                completed,
                summary,
                next_action,
                git_info=git_info,
                test_info=test_info
            )

            # –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PROJECT.md
            cm.generate_project_md(completed, summary, next_action)

            print_success("\nSession ended!")
            print_info(f"Duration: {format_duration(completed['duration'])}")
            print_info(f"Snapshot saved: {Path(snapshot_path).name}")
            print_info("PROJECT.md updated")

            return 0

        except (SessionError, ContextError) as e:
            print_error(f"Failed to end session: {e}")
            return 1

    def cmd_status(self, args: List[str]) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞."""
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        project_name = args[0] if args else None
        project = self._resolve_project(project_name)

        if not project:
            return 1

        print_header(f"üìä Status: {project.name}")

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Å—Å–∏–∏
        sm = SessionManager(project)
        active = sm.get_active()

        if active:
            print_subsection("Active Session")
            print(f"Started: {format_timestamp(active['start_time'])}")
            if active.get('description'):
                print(f"Description: {active['description']}")

            # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Ç–µ–∫—É—â—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            from datetime import datetime
            start = datetime.fromisoformat(active['start_time'])
            duration = int((datetime.now() - start).total_seconds())
            print(f"Duration: {format_duration(duration)}")
        else:
            print("No active session\n")

        # –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self._show_last_context(project)

        # –°—Ç–∞—Ç—É—Å Git
        self._show_git_status(project)

        # –°—Ç–∞—Ç—É—Å —Ç–µ—Å—Ç–æ–≤
        self._show_test_status(project)

        return 0

    def cmd_history(self, args: List[str]) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é —Å–µ—Å—Å–∏–π."""
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        project_name = args[0] if args and not args[0].startswith('--') else None
        project = self._resolve_project(project_name)

        if not project:
            return 1

        # –†–∞–∑–æ–±—Ä–∞—Ç—å –ª–∏–º–∏—Ç
        limit = 10
        for i, arg in enumerate(args):
            if arg == "--limit" and i + 1 < len(args):
                try:
                    limit = int(args[i + 1])
                except ValueError:
                    print_error("Invalid limit value")
                    return 1

        sm = SessionManager(project)
        history = sm.get_history(limit=limit)

        if not history:
            print_info("No completed sessions yet")
            return 0

        print_header(f"üìú Session History: {project.name}")

        for i, session in enumerate(history, 1):
            print(f"\n{i}. Session")
            print(f"   Started: {format_timestamp(session['start_time'])}")
            print(f"   Duration: {format_duration(session['duration'])}")

            if session.get('summary'):
                summary = session['summary'][:60]
                if len(session['summary']) > 60:
                    summary += "..."
                print(f"   Summary: {summary}")

        print(f"\nShowing {len(history)} most recent sessions")

        return 0

    def cmd_stats(self, args: List[str]) -> int:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Å—Å–∏–π."""
        # –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–µ–∫—Ç
        project_name = args[0] if args else None
        project = self._resolve_project(project_name)

        if not project:
            return 1
        sm = SessionManager(project)
        stats = sm.get_stats()

        print_header(f"üìä Statistics: {project.name}")

        print(format_stats(stats))

        # –í—Ä–µ–º—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        today_time = sm.get_total_time_today()
        if today_time > 0:
            print(f"\nToday's Total: {format_duration(today_time)}")
        return 0

    # ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ====================

    def _resolve_project(self, project_name: Optional[str]) -> Optional[Project]:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∏–º—è –ø—Ä–æ–µ–∫—Ç–∞ –≤ —ç–∫–∑–µ–º–ø–ª—è—Ä Project."""
        if project_name:
            project = self.registry.get(project_name)
            if not project:
                print_error(f"Project '{project_name}' not found")
                return None
            return project

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
        if self.config.current_project:
            return self.registry.get(self.config.current_project)

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
        project = self.registry.detect_current()
        if project:
            print_info(f"Auto-detected project:
